#include <string>
#include <fstream>
#include <iostream>

typedef float Element;

class DynamicArray{

	private:
		//Array of elements, since the array has to be dynamic
		//this value is a pointer to an Element
		Element* dynamicArray;

		//The number of elements currently in the array
		int arraySize;

		//The number of elements that can possibly fit in the array without reallocation
		int arrayCapacity;

	public:
		//Default Constructor
		DynamicArray();
		
		//Explicit Value Constructor
		DynamicArray(int size, Element e);
		
		//Destructor
		~DynamicArray();

		//Add to end
		void push_back(Element e){
			//double check to see if array size=capacity	
			//if size is at capacity increase capacity
			//if not add one to size and element
			//check to see if element e is not null?
			if(arraySize>=arrayCapacity){
				arrayCapacity*2;
				
			}
			
			else if(arraySize<arrayCapacity){
				dynamicArray[arraySize+1]=e;
				arraySize+=1;
			}
	

		}
		
		//Remove from end and return
		Element pop_back(){
			Element temp=dynamicArray[arraySize];
			for(int i=0; i<arraySize-1;i++){
				dynamicArray[element]=array[i];
			}
			arraySize-=1;
			return temp;


		}
		
		//Search, return position in array, -1 if not found
		int search(Element e){
			int temp=0;
			for(int i=0; i<arraySize;i++){	
				if(dynamicArray[element]==e){
					temp+=1;
					return i;
				}
			}
			if(temp==0){
				return -1;
			}
				
			
		}

		//Indicate whether or not the provided index is valid
		bool valid_index(int index){
			if(index<0){
				return false;
			}
			else if(index==null){
				return false;
			}
			else if(index>=0){
				return true;
			}
		

		}

		//Return the size of the array (number of elements currently in the array)
		int size(){
			return arraySize;
		}

		//Return the capacity of the array (number of elements the array can currently hold)
		int capacity(){
			return arrayCapacity;
		}
};
